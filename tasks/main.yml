---

- name: Check if we already have a certificate
  stat:
    path: "/etc/letsencrypt/live/{{ domain }}/fullchain.pem"
  register: letsencrypt_cert

- name: Get an SSL certificate for {{ domain }} from Let's Encrypt
  command: "/usr/bin/certbot certonly --webroot -w {{ web_path_letsencrypt }} --preferred-challenges http-01 -d {{ domain }} --register-unsafely-without-email --agree-tos -n"
  args:
    creates: "/etc/letsencrypt/live/{{ domain }}/privkey.pem"
  when:
    - not letsencrypt_cert.stat.exists
    - testing is undefined
    - letsencrypt_method == 'webroot'

- name: Get an SSL certificate for {{ domain }} from Let's Encrypt
  command: "/usr/bin/certbot certonly --standalone --preferred-challenges http-01 -d {{ domain }} --register-unsafely-without-email --agree-tos -n"
  args:
    creates: "/etc/letsencrypt/live/{{ domain }}/privkey.pem"
  when:
    - not letsencrypt_cert.stat.exists
    - testing is undefined
    - letsencrypt_method == 'standalone'

- name: Configure Let's Encrypt. Delete extra line.
  lineinfile:
    path: "/etc/letsencrypt/renewal/{{ domain }}.conf"
    regexp: '^pref_challs'
    state: absent
  when:
    - testing is undefined

- name: Configure Let's Encrypt. Change auto renewal method.
  lineinfile:
    path: "/etc/letsencrypt/renewal/{{ domain }}.conf"
    regexp: '^authenticator'
    line: 'authenticator = webroot'
    state: present
    mode: 0644
  when:
    - testing is undefined

- name: Configure Let's Encrypt. Configure renewal hook.
  blockinfile:
    path: "/etc/letsencrypt/renewal/{{ domain }}.conf"
    insertbefore: "[[webroot_map]]"
    block: "{{ letsencrypt_renewal_conf }}"
    state: present
  when:
    - testing is undefined
    - letsencrypt_renew_hook is defined

# Alternative if we are testing (as we can't get Let's Encrypt certificates)

- name: Create live directory for testing keys
  file:
    dest: /etc/letsencrypt/live/{{ domain }}
    state: directory
    owner: root
    group: root
    mode: 0755
  when:
    - testing is defined
    - not letsencrypt_cert.stat.exists

- name: Create live directory for testing CA
  file:
    dest: /etc/letsencrypt/live/CA
    state: directory
    owner: root
    group: root
    mode: 0755
  when:
    - testing is defined
    - letsencrypt_cert.stat.exists == False

- name: Install openssl
  apt:
    pkg: openssl
    state: present
  when:
    - testing is defined
    - not letsencrypt_cert.stat.exists

- name: Create self-signed root certificate (CA), if testing.
  command: >
    openssl req -x509 -new -nodes -subj '/CN=lili' -days 30
    -newkey rsa:4096 -sha256 -keyout /etc/letsencrypt/live/CA/rootCA.key
    -out /etc/letsencrypt/live/CA/rootCA.pem
  args:
    creates: /etc/letsencrypt/live/CA/rootCA.pem
  ignore_errors: yes
  when:
    - testing is defined
    - letsencrypt_cert.stat.exists == False

- name: Create self-signed certificate, if testing.
  command: >
    openssl req -new -nodes -subj '/CN=lili' -days 30 \
    -newkey rsa:4096 -sha256 -keyout /etc/letsencrypt/live/{{ domain }}/privkey.pem \
    -out /etc/letsencrypt/live/{{ domain }}/cert.csr
  args:
    creates: /etc/letsencrypt/live/{{ domain }}/cert.csr
  ignore_errors: yes
  when:
    - testing is defined
    - letsencrypt_cert.stat.exists == False

- name: Create X.509 v3 configuration file
  template:
    src: san_template.ext.j2
    dest: "/etc/letsencrypt/live/{{ domain }}/{{ domain }}.ext"
  ignore_errors: yes
  when:
    - testing is defined

- name: Create self-signed certificate, if testing.
  command: >
    openssl x509 -req -in /etc/letsencrypt/live/{{ domain }}/cert.csr
    -CA /etc/letsencrypt/live/CA/rootCA.pem
    -CAkey /etc/letsencrypt/live/CA/rootCA.key
    -CAcreateserial -out /etc/letsencrypt/live/{{ domain }}/cert.pem
    -days 30 -sha256 -extfile /etc/letsencrypt/live/{{ domain }}/{{ domain }}.ext
  args:
    creates: /etc/letsencrypt/live/{{ domain }}/cert.pem
  ignore_errors: true
  when:
    - testing is defined
    - not letsencrypt_cert.stat.exists

- name: Check if the certificate is on the system
  stat:
    path: "/usr/share/ca-certificates/extra/{{ base_domain }}.crt"
  register: system_cert

- name: Create custom CA directory on system certificates
  file:
    dest: /usr/share/ca-certificates/extra
    state: directory
    owner: root
    group: root
    mode: 0755
  when:
    - testing is defined
    - system_cert.stat.exists == False

- name: Add CA to system
  copy:
    src: /etc/letsencrypt/live/CA/rootCA.pem
    dest: /usr/share/ca-certificates/extra/{{ base_domain }}.crt
    remote_src: yes
  ignore_errors: yes
  when:
    - testing is defined
    - system_cert.stat.exists == False

- name: Update CA certificates on remote host.
  command: >
    update-ca-certificates
  ignore_errors: yes
  when:
    - testing is defined
    - system_cert.stat.exists == False

- name: Create a combined SSL cert for testing
  shell: cat /etc/letsencrypt/live/{{ domain }}/cert.pem >
    /etc/letsencrypt/live/{{ domain }}/fullchain.pem
  when:
    - testing is defined
    - not letsencrypt_cert.stat.exists

- name: Set permissions on combined SSL public cert
  file:
    name: "{{ item }}"
    mode: 0644
  with_items:
    - "/etc/letsencrypt/live/{{ domain }}/fullchain.pem"
    - "/etc/letsencrypt/live/{{ domain }}/cert.pem"
    - "/etc/letsencrypt/live/{{ domain }}/privkey.pem"
  when:
    - testing is defined
